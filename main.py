import logging
import sys
import os
from core.bot import TelegramBot
from utils.database import Database

# Configuration du logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Importer keep_alive seulement si n√©cessaire
try:
    from keep_alive import keep_alive
    keep_alive()
    logger.info("‚úÖ Keep-alive activ√©")
except ImportError:
    logger.warning("‚ö†Ô∏è Keep-alive non disponible")


def main():
    """Point d'entr√©e principal du bot"""
    db = Database()

    try:
        logger.info("üéØ Initialisation du bot Telegram...")

        # V√©rifier si une autre instance tourne d√©j√† (via DB lock)
        if not db.acquire_lock():
            logger.error("‚ùå Une autre instance du bot est d√©j√† en cours d'ex√©cution!")
            sys.exit(1)

        # V√©rifier qu'on n‚Äôa pas d√©j√† marqu√© en m√©moire
        if 'BOT_RUNNING' in os.environ:
            logger.error("‚ùå Une instance du bot est d√©j√† en cours d'ex√©cution (via env)!")
            sys.exit(1)

        # Marquer comme en cours d'ex√©cution
        os.environ['BOT_RUNNING'] = 'true'

        # Cr√©er et d√©marrer le bot
        bot = TelegramBot()
        bot.start()

    except KeyboardInterrupt:
        logger.info("üõë Arr√™t demand√© par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
        sys.exit(1)
    finally:
        # Nettoyer le marqueur d'ex√©cution
        os.environ.pop('BOT_RUNNING', None)

        # Lib√©rer le verrou en DB
        db.release_lock()

        logger.info("üßπ Nettoyage termin√©")


if __name__ == "__main__":
    main()
